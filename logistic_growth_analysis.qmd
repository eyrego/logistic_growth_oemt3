---
title: "logistic_growth_analysis"
format: html
editor: visual
---

#Installing Packages

```{r}
renv::init() 
renv::snapshot()
```

## Plotting Data

#Script to plot the logistic growth data

```{r}
growth_data <- read.csv("experiment_data.csv")
```

Note: have already installed ggplot2 without coding.

```{r}
library(ggplot2)
```

The graph below codes for a graph showing the relationship between time and number of cells in a growth medium with limited resources.

```{r}
ggplot(aes(t,N), data = growth_data) + geom_point() + xlab("t") + ylab("Number of cells") + theme_bw()
```

The graph below codes for a graph showing the relationship between time and log number of cells.

```{r}
ggplot(aes(t,N), data = growth_data) + geom_point() + xlab("t") + ylab("log cell number") + scale_y_continuous(trans='log10')
```

# Script to fit linear models

#Script to estimate the model parameters using a linear approximation

Note: Had to install diplyr

```{r}
library(dplyr)
```

Did have code asking to define growth_data, but have already loaded above so feel this is superfluous.

#Case 1. K \>\> N0, t is small.

The below code is subsetting data to only that collected before 2500 units of time (i presume minutes), i.e when the population is in the lag and log phases. The subsequent code then fits a linear model to the subsetted data.

```{r}
data_subset1 <- growth_data %>% filter(t<1500) %>% mutate(N_log = log(N))

model1 <- lm(N_log ~ t, data_subset1)
summary(model1)
```

#Case 2. N(t) = K.

The code below is now analysing what is happening when the population has reached carrying capacity

```{r}
data_subset2 <- growth_data %>% filter(t>2500)

model2 <- lm(N ~ 1, data_subset2)
summary(model2)
```

#Script to plot data and model.

The code below fits a model based on specified values and fits to the graph generated by our data, allowing analysis of fit of the data to the model.

```{r}
logistic_fun <- function(t) {
N <- (N0*K*exp(r*t))/(K-N0+N0*exp(r*t))
return(N)
}

N0 <- 1000

r <- 0.0100086

K <- 60000000000

ggplot(aes(t,N), data = growth_data) + geom_function(fun=logistic_fun, colour="red") + geom_point()+ scale_y_continuous(trans='log10')
```
